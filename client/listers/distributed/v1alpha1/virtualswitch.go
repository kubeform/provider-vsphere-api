/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/distributed/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VirtualSwitchLister helps list VirtualSwitches.
// All objects returned here must be treated as read-only.
type VirtualSwitchLister interface {
	// List lists all VirtualSwitches in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualSwitch, err error)
	// VirtualSwitches returns an object that can list and get VirtualSwitches.
	VirtualSwitches(namespace string) VirtualSwitchNamespaceLister
	VirtualSwitchListerExpansion
}

// virtualSwitchLister implements the VirtualSwitchLister interface.
type virtualSwitchLister struct {
	indexer cache.Indexer
}

// NewVirtualSwitchLister returns a new VirtualSwitchLister.
func NewVirtualSwitchLister(indexer cache.Indexer) VirtualSwitchLister {
	return &virtualSwitchLister{indexer: indexer}
}

// List lists all VirtualSwitches in the indexer.
func (s *virtualSwitchLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualSwitch, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualSwitch))
	})
	return ret, err
}

// VirtualSwitches returns an object that can list and get VirtualSwitches.
func (s *virtualSwitchLister) VirtualSwitches(namespace string) VirtualSwitchNamespaceLister {
	return virtualSwitchNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VirtualSwitchNamespaceLister helps list and get VirtualSwitches.
// All objects returned here must be treated as read-only.
type VirtualSwitchNamespaceLister interface {
	// List lists all VirtualSwitches in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.VirtualSwitch, err error)
	// Get retrieves the VirtualSwitch from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.VirtualSwitch, error)
	VirtualSwitchNamespaceListerExpansion
}

// virtualSwitchNamespaceLister implements the VirtualSwitchNamespaceLister
// interface.
type virtualSwitchNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all VirtualSwitches in the indexer for a given namespace.
func (s virtualSwitchNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.VirtualSwitch, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.VirtualSwitch))
	})
	return ret, err
}

// Get retrieves the VirtualSwitch from the indexer for a given namespace and name.
func (s virtualSwitchNamespaceLister) Get(name string) (*v1alpha1.VirtualSwitch, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("virtualswitch"), name)
	}
	return obj.(*v1alpha1.VirtualSwitch), nil
}
