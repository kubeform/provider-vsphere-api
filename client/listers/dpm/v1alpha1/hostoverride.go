/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/dpm/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HostOverrideLister helps list HostOverrides.
// All objects returned here must be treated as read-only.
type HostOverrideLister interface {
	// List lists all HostOverrides in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostOverride, err error)
	// HostOverrides returns an object that can list and get HostOverrides.
	HostOverrides(namespace string) HostOverrideNamespaceLister
	HostOverrideListerExpansion
}

// hostOverrideLister implements the HostOverrideLister interface.
type hostOverrideLister struct {
	indexer cache.Indexer
}

// NewHostOverrideLister returns a new HostOverrideLister.
func NewHostOverrideLister(indexer cache.Indexer) HostOverrideLister {
	return &hostOverrideLister{indexer: indexer}
}

// List lists all HostOverrides in the indexer.
func (s *hostOverrideLister) List(selector labels.Selector) (ret []*v1alpha1.HostOverride, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostOverride))
	})
	return ret, err
}

// HostOverrides returns an object that can list and get HostOverrides.
func (s *hostOverrideLister) HostOverrides(namespace string) HostOverrideNamespaceLister {
	return hostOverrideNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HostOverrideNamespaceLister helps list and get HostOverrides.
// All objects returned here must be treated as read-only.
type HostOverrideNamespaceLister interface {
	// List lists all HostOverrides in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HostOverride, err error)
	// Get retrieves the HostOverride from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HostOverride, error)
	HostOverrideNamespaceListerExpansion
}

// hostOverrideNamespaceLister implements the HostOverrideNamespaceLister
// interface.
type hostOverrideNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HostOverrides in the indexer for a given namespace.
func (s hostOverrideNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HostOverride, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HostOverride))
	})
	return ret, err
}

// Get retrieves the HostOverride from the indexer for a given namespace and name.
func (s hostOverrideNamespaceLister) Get(name string) (*v1alpha1.HostOverride, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("hostoverride"), name)
	}
	return obj.(*v1alpha1.HostOverride), nil
}
