/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/virtual/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// MachineSnapshotLister helps list MachineSnapshots.
// All objects returned here must be treated as read-only.
type MachineSnapshotLister interface {
	// List lists all MachineSnapshots in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MachineSnapshot, err error)
	// MachineSnapshots returns an object that can list and get MachineSnapshots.
	MachineSnapshots(namespace string) MachineSnapshotNamespaceLister
	MachineSnapshotListerExpansion
}

// machineSnapshotLister implements the MachineSnapshotLister interface.
type machineSnapshotLister struct {
	indexer cache.Indexer
}

// NewMachineSnapshotLister returns a new MachineSnapshotLister.
func NewMachineSnapshotLister(indexer cache.Indexer) MachineSnapshotLister {
	return &machineSnapshotLister{indexer: indexer}
}

// List lists all MachineSnapshots in the indexer.
func (s *machineSnapshotLister) List(selector labels.Selector) (ret []*v1alpha1.MachineSnapshot, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MachineSnapshot))
	})
	return ret, err
}

// MachineSnapshots returns an object that can list and get MachineSnapshots.
func (s *machineSnapshotLister) MachineSnapshots(namespace string) MachineSnapshotNamespaceLister {
	return machineSnapshotNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// MachineSnapshotNamespaceLister helps list and get MachineSnapshots.
// All objects returned here must be treated as read-only.
type MachineSnapshotNamespaceLister interface {
	// List lists all MachineSnapshots in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.MachineSnapshot, err error)
	// Get retrieves the MachineSnapshot from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.MachineSnapshot, error)
	MachineSnapshotNamespaceListerExpansion
}

// machineSnapshotNamespaceLister implements the MachineSnapshotNamespaceLister
// interface.
type machineSnapshotNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all MachineSnapshots in the indexer for a given namespace.
func (s machineSnapshotNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.MachineSnapshot, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.MachineSnapshot))
	})
	return ret, err
}

// Get retrieves the MachineSnapshot from the indexer for a given namespace and name.
func (s machineSnapshotNamespaceLister) Get(name string) (*v1alpha1.MachineSnapshot, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("machinesnapshot"), name)
	}
	return obj.(*v1alpha1.MachineSnapshot), nil
}
