/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/datastore/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterVmAntiAffinityRuleLister helps list ClusterVmAntiAffinityRules.
// All objects returned here must be treated as read-only.
type ClusterVmAntiAffinityRuleLister interface {
	// List lists all ClusterVmAntiAffinityRules in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterVmAntiAffinityRule, err error)
	// ClusterVmAntiAffinityRules returns an object that can list and get ClusterVmAntiAffinityRules.
	ClusterVmAntiAffinityRules(namespace string) ClusterVmAntiAffinityRuleNamespaceLister
	ClusterVmAntiAffinityRuleListerExpansion
}

// clusterVmAntiAffinityRuleLister implements the ClusterVmAntiAffinityRuleLister interface.
type clusterVmAntiAffinityRuleLister struct {
	indexer cache.Indexer
}

// NewClusterVmAntiAffinityRuleLister returns a new ClusterVmAntiAffinityRuleLister.
func NewClusterVmAntiAffinityRuleLister(indexer cache.Indexer) ClusterVmAntiAffinityRuleLister {
	return &clusterVmAntiAffinityRuleLister{indexer: indexer}
}

// List lists all ClusterVmAntiAffinityRules in the indexer.
func (s *clusterVmAntiAffinityRuleLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterVmAntiAffinityRule, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterVmAntiAffinityRule))
	})
	return ret, err
}

// ClusterVmAntiAffinityRules returns an object that can list and get ClusterVmAntiAffinityRules.
func (s *clusterVmAntiAffinityRuleLister) ClusterVmAntiAffinityRules(namespace string) ClusterVmAntiAffinityRuleNamespaceLister {
	return clusterVmAntiAffinityRuleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterVmAntiAffinityRuleNamespaceLister helps list and get ClusterVmAntiAffinityRules.
// All objects returned here must be treated as read-only.
type ClusterVmAntiAffinityRuleNamespaceLister interface {
	// List lists all ClusterVmAntiAffinityRules in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ClusterVmAntiAffinityRule, err error)
	// Get retrieves the ClusterVmAntiAffinityRule from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ClusterVmAntiAffinityRule, error)
	ClusterVmAntiAffinityRuleNamespaceListerExpansion
}

// clusterVmAntiAffinityRuleNamespaceLister implements the ClusterVmAntiAffinityRuleNamespaceLister
// interface.
type clusterVmAntiAffinityRuleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterVmAntiAffinityRules in the indexer for a given namespace.
func (s clusterVmAntiAffinityRuleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ClusterVmAntiAffinityRule, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ClusterVmAntiAffinityRule))
	})
	return ret, err
}

// Get retrieves the ClusterVmAntiAffinityRule from the indexer for a given namespace and name.
func (s clusterVmAntiAffinityRuleNamespaceLister) Get(name string) (*v1alpha1.ClusterVmAntiAffinityRule, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("clustervmantiaffinityrule"), name)
	}
	return obj.(*v1alpha1.ClusterVmAntiAffinityRule), nil
}
