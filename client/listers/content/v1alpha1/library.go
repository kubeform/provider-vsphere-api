/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/content/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LibraryLister helps list Libraries.
// All objects returned here must be treated as read-only.
type LibraryLister interface {
	// List lists all Libraries in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Library, err error)
	// Libraries returns an object that can list and get Libraries.
	Libraries(namespace string) LibraryNamespaceLister
	LibraryListerExpansion
}

// libraryLister implements the LibraryLister interface.
type libraryLister struct {
	indexer cache.Indexer
}

// NewLibraryLister returns a new LibraryLister.
func NewLibraryLister(indexer cache.Indexer) LibraryLister {
	return &libraryLister{indexer: indexer}
}

// List lists all Libraries in the indexer.
func (s *libraryLister) List(selector labels.Selector) (ret []*v1alpha1.Library, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Library))
	})
	return ret, err
}

// Libraries returns an object that can list and get Libraries.
func (s *libraryLister) Libraries(namespace string) LibraryNamespaceLister {
	return libraryNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LibraryNamespaceLister helps list and get Libraries.
// All objects returned here must be treated as read-only.
type LibraryNamespaceLister interface {
	// List lists all Libraries in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Library, err error)
	// Get retrieves the Library from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Library, error)
	LibraryNamespaceListerExpansion
}

// libraryNamespaceLister implements the LibraryNamespaceLister
// interface.
type libraryNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Libraries in the indexer for a given namespace.
func (s libraryNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Library, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Library))
	})
	return ret, err
}

// Get retrieves the Library from the indexer for a given namespace and name.
func (s libraryNamespaceLister) Get(name string) (*v1alpha1.Library, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("library"), name)
	}
	return obj.(*v1alpha1.Library), nil
}
