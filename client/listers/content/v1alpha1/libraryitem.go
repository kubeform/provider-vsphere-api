/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/content/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LibraryItemLister helps list LibraryItems.
// All objects returned here must be treated as read-only.
type LibraryItemLister interface {
	// List lists all LibraryItems in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LibraryItem, err error)
	// LibraryItems returns an object that can list and get LibraryItems.
	LibraryItems(namespace string) LibraryItemNamespaceLister
	LibraryItemListerExpansion
}

// libraryItemLister implements the LibraryItemLister interface.
type libraryItemLister struct {
	indexer cache.Indexer
}

// NewLibraryItemLister returns a new LibraryItemLister.
func NewLibraryItemLister(indexer cache.Indexer) LibraryItemLister {
	return &libraryItemLister{indexer: indexer}
}

// List lists all LibraryItems in the indexer.
func (s *libraryItemLister) List(selector labels.Selector) (ret []*v1alpha1.LibraryItem, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LibraryItem))
	})
	return ret, err
}

// LibraryItems returns an object that can list and get LibraryItems.
func (s *libraryItemLister) LibraryItems(namespace string) LibraryItemNamespaceLister {
	return libraryItemNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LibraryItemNamespaceLister helps list and get LibraryItems.
// All objects returned here must be treated as read-only.
type LibraryItemNamespaceLister interface {
	// List lists all LibraryItems in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.LibraryItem, err error)
	// Get retrieves the LibraryItem from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.LibraryItem, error)
	LibraryItemNamespaceListerExpansion
}

// libraryItemNamespaceLister implements the LibraryItemNamespaceLister
// interface.
type libraryItemNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LibraryItems in the indexer for a given namespace.
func (s libraryItemNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.LibraryItem, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.LibraryItem))
	})
	return ret, err
}

// Get retrieves the LibraryItem from the indexer for a given namespace and name.
func (s libraryItemNamespaceLister) Get(name string) (*v1alpha1.LibraryItem, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("libraryitem"), name)
	}
	return obj.(*v1alpha1.LibraryItem), nil
}
