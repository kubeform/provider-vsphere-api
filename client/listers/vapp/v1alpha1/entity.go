/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/vapp/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// EntityLister helps list Entities.
// All objects returned here must be treated as read-only.
type EntityLister interface {
	// List lists all Entities in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Entity, err error)
	// Entities returns an object that can list and get Entities.
	Entities(namespace string) EntityNamespaceLister
	EntityListerExpansion
}

// entityLister implements the EntityLister interface.
type entityLister struct {
	indexer cache.Indexer
}

// NewEntityLister returns a new EntityLister.
func NewEntityLister(indexer cache.Indexer) EntityLister {
	return &entityLister{indexer: indexer}
}

// List lists all Entities in the indexer.
func (s *entityLister) List(selector labels.Selector) (ret []*v1alpha1.Entity, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Entity))
	})
	return ret, err
}

// Entities returns an object that can list and get Entities.
func (s *entityLister) Entities(namespace string) EntityNamespaceLister {
	return entityNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// EntityNamespaceLister helps list and get Entities.
// All objects returned here must be treated as read-only.
type EntityNamespaceLister interface {
	// List lists all Entities in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Entity, err error)
	// Get retrieves the Entity from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Entity, error)
	EntityNamespaceListerExpansion
}

// entityNamespaceLister implements the EntityNamespaceLister
// interface.
type entityNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Entities in the indexer for a given namespace.
func (s entityNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Entity, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Entity))
	})
	return ret, err
}

// Get retrieves the Entity from the indexer for a given namespace and name.
func (s entityNamespaceLister) Get(name string) (*v1alpha1.Entity, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("entity"), name)
	}
	return obj.(*v1alpha1.Entity), nil
}
