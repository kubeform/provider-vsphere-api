/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/custom/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AttributeLister helps list Attributes.
// All objects returned here must be treated as read-only.
type AttributeLister interface {
	// List lists all Attributes in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Attribute, err error)
	// Attributes returns an object that can list and get Attributes.
	Attributes(namespace string) AttributeNamespaceLister
	AttributeListerExpansion
}

// attributeLister implements the AttributeLister interface.
type attributeLister struct {
	indexer cache.Indexer
}

// NewAttributeLister returns a new AttributeLister.
func NewAttributeLister(indexer cache.Indexer) AttributeLister {
	return &attributeLister{indexer: indexer}
}

// List lists all Attributes in the indexer.
func (s *attributeLister) List(selector labels.Selector) (ret []*v1alpha1.Attribute, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Attribute))
	})
	return ret, err
}

// Attributes returns an object that can list and get Attributes.
func (s *attributeLister) Attributes(namespace string) AttributeNamespaceLister {
	return attributeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AttributeNamespaceLister helps list and get Attributes.
// All objects returned here must be treated as read-only.
type AttributeNamespaceLister interface {
	// List lists all Attributes in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Attribute, err error)
	// Get retrieves the Attribute from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Attribute, error)
	AttributeNamespaceListerExpansion
}

// attributeNamespaceLister implements the AttributeNamespaceLister
// interface.
type attributeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Attributes in the indexer for a given namespace.
func (s attributeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Attribute, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Attribute))
	})
	return ret, err
}

// Get retrieves the Attribute from the indexer for a given namespace and name.
func (s attributeNamespaceLister) Get(name string) (*v1alpha1.Attribute, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("attribute"), name)
	}
	return obj.(*v1alpha1.Attribute), nil
}
