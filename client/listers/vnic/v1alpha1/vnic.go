/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/vnic/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// VnicLister helps list Vnics.
// All objects returned here must be treated as read-only.
type VnicLister interface {
	// List lists all Vnics in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Vnic, err error)
	// Vnics returns an object that can list and get Vnics.
	Vnics(namespace string) VnicNamespaceLister
	VnicListerExpansion
}

// vnicLister implements the VnicLister interface.
type vnicLister struct {
	indexer cache.Indexer
}

// NewVnicLister returns a new VnicLister.
func NewVnicLister(indexer cache.Indexer) VnicLister {
	return &vnicLister{indexer: indexer}
}

// List lists all Vnics in the indexer.
func (s *vnicLister) List(selector labels.Selector) (ret []*v1alpha1.Vnic, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vnic))
	})
	return ret, err
}

// Vnics returns an object that can list and get Vnics.
func (s *vnicLister) Vnics(namespace string) VnicNamespaceLister {
	return vnicNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// VnicNamespaceLister helps list and get Vnics.
// All objects returned here must be treated as read-only.
type VnicNamespaceLister interface {
	// List lists all Vnics in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Vnic, err error)
	// Get retrieves the Vnic from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Vnic, error)
	VnicNamespaceListerExpansion
}

// vnicNamespaceLister implements the VnicNamespaceLister
// interface.
type vnicNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Vnics in the indexer for a given namespace.
func (s vnicNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Vnic, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Vnic))
	})
	return ret, err
}

// Get retrieves the Vnic from the indexer for a given namespace and name.
func (s vnicNamespaceLister) Get(name string) (*v1alpha1.Vnic, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("vnic"), name)
	}
	return obj.(*v1alpha1.Vnic), nil
}
