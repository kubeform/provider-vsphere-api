/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-vsphere-api/apis/datacenter/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// DatacenterLister helps list Datacenters.
// All objects returned here must be treated as read-only.
type DatacenterLister interface {
	// List lists all Datacenters in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Datacenter, err error)
	// Datacenters returns an object that can list and get Datacenters.
	Datacenters(namespace string) DatacenterNamespaceLister
	DatacenterListerExpansion
}

// datacenterLister implements the DatacenterLister interface.
type datacenterLister struct {
	indexer cache.Indexer
}

// NewDatacenterLister returns a new DatacenterLister.
func NewDatacenterLister(indexer cache.Indexer) DatacenterLister {
	return &datacenterLister{indexer: indexer}
}

// List lists all Datacenters in the indexer.
func (s *datacenterLister) List(selector labels.Selector) (ret []*v1alpha1.Datacenter, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Datacenter))
	})
	return ret, err
}

// Datacenters returns an object that can list and get Datacenters.
func (s *datacenterLister) Datacenters(namespace string) DatacenterNamespaceLister {
	return datacenterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// DatacenterNamespaceLister helps list and get Datacenters.
// All objects returned here must be treated as read-only.
type DatacenterNamespaceLister interface {
	// List lists all Datacenters in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.Datacenter, err error)
	// Get retrieves the Datacenter from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.Datacenter, error)
	DatacenterNamespaceListerExpansion
}

// datacenterNamespaceLister implements the DatacenterNamespaceLister
// interface.
type datacenterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all Datacenters in the indexer for a given namespace.
func (s datacenterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.Datacenter, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.Datacenter))
	})
	return ret, err
}

// Get retrieves the Datacenter from the indexer for a given namespace and name.
func (s datacenterNamespaceLister) Get(name string) (*v1alpha1.Datacenter, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("datacenter"), name)
	}
	return obj.(*v1alpha1.Datacenter), nil
}
