/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package versioned

import (
	"fmt"

	computev1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/compute/v1alpha1"
	contentv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/content/v1alpha1"
	customv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/custom/v1alpha1"
	datacenterv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/datacenter/v1alpha1"
	datastorev1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/datastore/v1alpha1"
	distributedv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/distributed/v1alpha1"
	dpmv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/dpm/v1alpha1"
	drsv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/drs/v1alpha1"
	entityv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/entity/v1alpha1"
	filev1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/file/v1alpha1"
	folderv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/folder/v1alpha1"
	hav1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/ha/v1alpha1"
	hostv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/host/v1alpha1"
	licensev1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/license/v1alpha1"
	nasv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/nas/v1alpha1"
	resourcev1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/resource/v1alpha1"
	rolev1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/role/v1alpha1"
	storagev1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/storage/v1alpha1"
	tagv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/tag/v1alpha1"
	vappv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/vapp/v1alpha1"
	virtualv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/virtual/v1alpha1"
	vmv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/vm/v1alpha1"
	vmfsv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/vmfs/v1alpha1"
	vnicv1alpha1 "kubeform.dev/provider-vsphere-api/client/clientset/versioned/typed/vnic/v1alpha1"

	discovery "k8s.io/client-go/discovery"
	rest "k8s.io/client-go/rest"
	flowcontrol "k8s.io/client-go/util/flowcontrol"
)

type Interface interface {
	Discovery() discovery.DiscoveryInterface
	ComputeV1alpha1() computev1alpha1.ComputeV1alpha1Interface
	ContentV1alpha1() contentv1alpha1.ContentV1alpha1Interface
	CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface
	DatacenterV1alpha1() datacenterv1alpha1.DatacenterV1alpha1Interface
	DatastoreV1alpha1() datastorev1alpha1.DatastoreV1alpha1Interface
	DistributedV1alpha1() distributedv1alpha1.DistributedV1alpha1Interface
	DpmV1alpha1() dpmv1alpha1.DpmV1alpha1Interface
	DrsV1alpha1() drsv1alpha1.DrsV1alpha1Interface
	EntityV1alpha1() entityv1alpha1.EntityV1alpha1Interface
	FileV1alpha1() filev1alpha1.FileV1alpha1Interface
	FolderV1alpha1() folderv1alpha1.FolderV1alpha1Interface
	HaV1alpha1() hav1alpha1.HaV1alpha1Interface
	HostV1alpha1() hostv1alpha1.HostV1alpha1Interface
	LicenseV1alpha1() licensev1alpha1.LicenseV1alpha1Interface
	NasV1alpha1() nasv1alpha1.NasV1alpha1Interface
	ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface
	RoleV1alpha1() rolev1alpha1.RoleV1alpha1Interface
	StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface
	TagV1alpha1() tagv1alpha1.TagV1alpha1Interface
	VappV1alpha1() vappv1alpha1.VappV1alpha1Interface
	VirtualV1alpha1() virtualv1alpha1.VirtualV1alpha1Interface
	VmV1alpha1() vmv1alpha1.VmV1alpha1Interface
	VmfsV1alpha1() vmfsv1alpha1.VmfsV1alpha1Interface
	VnicV1alpha1() vnicv1alpha1.VnicV1alpha1Interface
}

// Clientset contains the clients for groups. Each group has exactly one
// version included in a Clientset.
type Clientset struct {
	*discovery.DiscoveryClient
	computeV1alpha1     *computev1alpha1.ComputeV1alpha1Client
	contentV1alpha1     *contentv1alpha1.ContentV1alpha1Client
	customV1alpha1      *customv1alpha1.CustomV1alpha1Client
	datacenterV1alpha1  *datacenterv1alpha1.DatacenterV1alpha1Client
	datastoreV1alpha1   *datastorev1alpha1.DatastoreV1alpha1Client
	distributedV1alpha1 *distributedv1alpha1.DistributedV1alpha1Client
	dpmV1alpha1         *dpmv1alpha1.DpmV1alpha1Client
	drsV1alpha1         *drsv1alpha1.DrsV1alpha1Client
	entityV1alpha1      *entityv1alpha1.EntityV1alpha1Client
	fileV1alpha1        *filev1alpha1.FileV1alpha1Client
	folderV1alpha1      *folderv1alpha1.FolderV1alpha1Client
	haV1alpha1          *hav1alpha1.HaV1alpha1Client
	hostV1alpha1        *hostv1alpha1.HostV1alpha1Client
	licenseV1alpha1     *licensev1alpha1.LicenseV1alpha1Client
	nasV1alpha1         *nasv1alpha1.NasV1alpha1Client
	resourceV1alpha1    *resourcev1alpha1.ResourceV1alpha1Client
	roleV1alpha1        *rolev1alpha1.RoleV1alpha1Client
	storageV1alpha1     *storagev1alpha1.StorageV1alpha1Client
	tagV1alpha1         *tagv1alpha1.TagV1alpha1Client
	vappV1alpha1        *vappv1alpha1.VappV1alpha1Client
	virtualV1alpha1     *virtualv1alpha1.VirtualV1alpha1Client
	vmV1alpha1          *vmv1alpha1.VmV1alpha1Client
	vmfsV1alpha1        *vmfsv1alpha1.VmfsV1alpha1Client
	vnicV1alpha1        *vnicv1alpha1.VnicV1alpha1Client
}

// ComputeV1alpha1 retrieves the ComputeV1alpha1Client
func (c *Clientset) ComputeV1alpha1() computev1alpha1.ComputeV1alpha1Interface {
	return c.computeV1alpha1
}

// ContentV1alpha1 retrieves the ContentV1alpha1Client
func (c *Clientset) ContentV1alpha1() contentv1alpha1.ContentV1alpha1Interface {
	return c.contentV1alpha1
}

// CustomV1alpha1 retrieves the CustomV1alpha1Client
func (c *Clientset) CustomV1alpha1() customv1alpha1.CustomV1alpha1Interface {
	return c.customV1alpha1
}

// DatacenterV1alpha1 retrieves the DatacenterV1alpha1Client
func (c *Clientset) DatacenterV1alpha1() datacenterv1alpha1.DatacenterV1alpha1Interface {
	return c.datacenterV1alpha1
}

// DatastoreV1alpha1 retrieves the DatastoreV1alpha1Client
func (c *Clientset) DatastoreV1alpha1() datastorev1alpha1.DatastoreV1alpha1Interface {
	return c.datastoreV1alpha1
}

// DistributedV1alpha1 retrieves the DistributedV1alpha1Client
func (c *Clientset) DistributedV1alpha1() distributedv1alpha1.DistributedV1alpha1Interface {
	return c.distributedV1alpha1
}

// DpmV1alpha1 retrieves the DpmV1alpha1Client
func (c *Clientset) DpmV1alpha1() dpmv1alpha1.DpmV1alpha1Interface {
	return c.dpmV1alpha1
}

// DrsV1alpha1 retrieves the DrsV1alpha1Client
func (c *Clientset) DrsV1alpha1() drsv1alpha1.DrsV1alpha1Interface {
	return c.drsV1alpha1
}

// EntityV1alpha1 retrieves the EntityV1alpha1Client
func (c *Clientset) EntityV1alpha1() entityv1alpha1.EntityV1alpha1Interface {
	return c.entityV1alpha1
}

// FileV1alpha1 retrieves the FileV1alpha1Client
func (c *Clientset) FileV1alpha1() filev1alpha1.FileV1alpha1Interface {
	return c.fileV1alpha1
}

// FolderV1alpha1 retrieves the FolderV1alpha1Client
func (c *Clientset) FolderV1alpha1() folderv1alpha1.FolderV1alpha1Interface {
	return c.folderV1alpha1
}

// HaV1alpha1 retrieves the HaV1alpha1Client
func (c *Clientset) HaV1alpha1() hav1alpha1.HaV1alpha1Interface {
	return c.haV1alpha1
}

// HostV1alpha1 retrieves the HostV1alpha1Client
func (c *Clientset) HostV1alpha1() hostv1alpha1.HostV1alpha1Interface {
	return c.hostV1alpha1
}

// LicenseV1alpha1 retrieves the LicenseV1alpha1Client
func (c *Clientset) LicenseV1alpha1() licensev1alpha1.LicenseV1alpha1Interface {
	return c.licenseV1alpha1
}

// NasV1alpha1 retrieves the NasV1alpha1Client
func (c *Clientset) NasV1alpha1() nasv1alpha1.NasV1alpha1Interface {
	return c.nasV1alpha1
}

// ResourceV1alpha1 retrieves the ResourceV1alpha1Client
func (c *Clientset) ResourceV1alpha1() resourcev1alpha1.ResourceV1alpha1Interface {
	return c.resourceV1alpha1
}

// RoleV1alpha1 retrieves the RoleV1alpha1Client
func (c *Clientset) RoleV1alpha1() rolev1alpha1.RoleV1alpha1Interface {
	return c.roleV1alpha1
}

// StorageV1alpha1 retrieves the StorageV1alpha1Client
func (c *Clientset) StorageV1alpha1() storagev1alpha1.StorageV1alpha1Interface {
	return c.storageV1alpha1
}

// TagV1alpha1 retrieves the TagV1alpha1Client
func (c *Clientset) TagV1alpha1() tagv1alpha1.TagV1alpha1Interface {
	return c.tagV1alpha1
}

// VappV1alpha1 retrieves the VappV1alpha1Client
func (c *Clientset) VappV1alpha1() vappv1alpha1.VappV1alpha1Interface {
	return c.vappV1alpha1
}

// VirtualV1alpha1 retrieves the VirtualV1alpha1Client
func (c *Clientset) VirtualV1alpha1() virtualv1alpha1.VirtualV1alpha1Interface {
	return c.virtualV1alpha1
}

// VmV1alpha1 retrieves the VmV1alpha1Client
func (c *Clientset) VmV1alpha1() vmv1alpha1.VmV1alpha1Interface {
	return c.vmV1alpha1
}

// VmfsV1alpha1 retrieves the VmfsV1alpha1Client
func (c *Clientset) VmfsV1alpha1() vmfsv1alpha1.VmfsV1alpha1Interface {
	return c.vmfsV1alpha1
}

// VnicV1alpha1 retrieves the VnicV1alpha1Client
func (c *Clientset) VnicV1alpha1() vnicv1alpha1.VnicV1alpha1Interface {
	return c.vnicV1alpha1
}

// Discovery retrieves the DiscoveryClient
func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	if c == nil {
		return nil
	}
	return c.DiscoveryClient
}

// NewForConfig creates a new Clientset for the given config.
// If config's RateLimiter is not set and QPS and Burst are acceptable,
// NewForConfig will generate a rate-limiter in configShallowCopy.
func NewForConfig(c *rest.Config) (*Clientset, error) {
	configShallowCopy := *c
	if configShallowCopy.RateLimiter == nil && configShallowCopy.QPS > 0 {
		if configShallowCopy.Burst <= 0 {
			return nil, fmt.Errorf("burst is required to be greater than 0 when RateLimiter is not set and QPS is set to greater than 0")
		}
		configShallowCopy.RateLimiter = flowcontrol.NewTokenBucketRateLimiter(configShallowCopy.QPS, configShallowCopy.Burst)
	}
	var cs Clientset
	var err error
	cs.computeV1alpha1, err = computev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.contentV1alpha1, err = contentv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.customV1alpha1, err = customv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.datacenterV1alpha1, err = datacenterv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.datastoreV1alpha1, err = datastorev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.distributedV1alpha1, err = distributedv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.dpmV1alpha1, err = dpmv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.drsV1alpha1, err = drsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.entityV1alpha1, err = entityv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.fileV1alpha1, err = filev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.folderV1alpha1, err = folderv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.haV1alpha1, err = hav1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.hostV1alpha1, err = hostv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.licenseV1alpha1, err = licensev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.nasV1alpha1, err = nasv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.resourceV1alpha1, err = resourcev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.roleV1alpha1, err = rolev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.storageV1alpha1, err = storagev1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.tagV1alpha1, err = tagv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vappV1alpha1, err = vappv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.virtualV1alpha1, err = virtualv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vmV1alpha1, err = vmv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vmfsV1alpha1, err = vmfsv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	cs.vnicV1alpha1, err = vnicv1alpha1.NewForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}

	cs.DiscoveryClient, err = discovery.NewDiscoveryClientForConfig(&configShallowCopy)
	if err != nil {
		return nil, err
	}
	return &cs, nil
}

// NewForConfigOrDie creates a new Clientset for the given config and
// panics if there is an error in the config.
func NewForConfigOrDie(c *rest.Config) *Clientset {
	var cs Clientset
	cs.computeV1alpha1 = computev1alpha1.NewForConfigOrDie(c)
	cs.contentV1alpha1 = contentv1alpha1.NewForConfigOrDie(c)
	cs.customV1alpha1 = customv1alpha1.NewForConfigOrDie(c)
	cs.datacenterV1alpha1 = datacenterv1alpha1.NewForConfigOrDie(c)
	cs.datastoreV1alpha1 = datastorev1alpha1.NewForConfigOrDie(c)
	cs.distributedV1alpha1 = distributedv1alpha1.NewForConfigOrDie(c)
	cs.dpmV1alpha1 = dpmv1alpha1.NewForConfigOrDie(c)
	cs.drsV1alpha1 = drsv1alpha1.NewForConfigOrDie(c)
	cs.entityV1alpha1 = entityv1alpha1.NewForConfigOrDie(c)
	cs.fileV1alpha1 = filev1alpha1.NewForConfigOrDie(c)
	cs.folderV1alpha1 = folderv1alpha1.NewForConfigOrDie(c)
	cs.haV1alpha1 = hav1alpha1.NewForConfigOrDie(c)
	cs.hostV1alpha1 = hostv1alpha1.NewForConfigOrDie(c)
	cs.licenseV1alpha1 = licensev1alpha1.NewForConfigOrDie(c)
	cs.nasV1alpha1 = nasv1alpha1.NewForConfigOrDie(c)
	cs.resourceV1alpha1 = resourcev1alpha1.NewForConfigOrDie(c)
	cs.roleV1alpha1 = rolev1alpha1.NewForConfigOrDie(c)
	cs.storageV1alpha1 = storagev1alpha1.NewForConfigOrDie(c)
	cs.tagV1alpha1 = tagv1alpha1.NewForConfigOrDie(c)
	cs.vappV1alpha1 = vappv1alpha1.NewForConfigOrDie(c)
	cs.virtualV1alpha1 = virtualv1alpha1.NewForConfigOrDie(c)
	cs.vmV1alpha1 = vmv1alpha1.NewForConfigOrDie(c)
	cs.vmfsV1alpha1 = vmfsv1alpha1.NewForConfigOrDie(c)
	cs.vnicV1alpha1 = vnicv1alpha1.NewForConfigOrDie(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClientForConfigOrDie(c)
	return &cs
}

// New creates a new Clientset for the given RESTClient.
func New(c rest.Interface) *Clientset {
	var cs Clientset
	cs.computeV1alpha1 = computev1alpha1.New(c)
	cs.contentV1alpha1 = contentv1alpha1.New(c)
	cs.customV1alpha1 = customv1alpha1.New(c)
	cs.datacenterV1alpha1 = datacenterv1alpha1.New(c)
	cs.datastoreV1alpha1 = datastorev1alpha1.New(c)
	cs.distributedV1alpha1 = distributedv1alpha1.New(c)
	cs.dpmV1alpha1 = dpmv1alpha1.New(c)
	cs.drsV1alpha1 = drsv1alpha1.New(c)
	cs.entityV1alpha1 = entityv1alpha1.New(c)
	cs.fileV1alpha1 = filev1alpha1.New(c)
	cs.folderV1alpha1 = folderv1alpha1.New(c)
	cs.haV1alpha1 = hav1alpha1.New(c)
	cs.hostV1alpha1 = hostv1alpha1.New(c)
	cs.licenseV1alpha1 = licensev1alpha1.New(c)
	cs.nasV1alpha1 = nasv1alpha1.New(c)
	cs.resourceV1alpha1 = resourcev1alpha1.New(c)
	cs.roleV1alpha1 = rolev1alpha1.New(c)
	cs.storageV1alpha1 = storagev1alpha1.New(c)
	cs.tagV1alpha1 = tagv1alpha1.New(c)
	cs.vappV1alpha1 = vappv1alpha1.New(c)
	cs.virtualV1alpha1 = virtualv1alpha1.New(c)
	cs.vmV1alpha1 = vmv1alpha1.New(c)
	cs.vmfsV1alpha1 = vmfsv1alpha1.New(c)
	cs.vnicV1alpha1 = vnicv1alpha1.New(c)

	cs.DiscoveryClient = discovery.NewDiscoveryClient(c)
	return &cs
}
